{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jordan\\\\file-converter\\\\frontend\\\\src\\\\components\\\\FileConverter.js\",\n  _s = $RefreshSig$();\nimport { useState, useContext } from 'react';\nimport { Box, Button, FormControl, InputLabel, MenuItem, Select, Typography, Paper } from '@mui/material';\nimport { CloudUpload, InsertDriveFile } from '@mui/icons-material';\nimport { UserContext } from '../context/UserContext';\nimport { convertFile } from '../services/api';\nimport ConversionProgress from './ConversionProgress';\nimport Notification from './Notification';\n\n// File type mappings\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILE_TYPES = {\n  // Audio\n  'mp3': 'audio',\n  'wav': 'audio',\n  'ogg': 'audio',\n  'm4a': 'audio',\n  // Video\n  'mp4': 'video',\n  'avi': 'video',\n  'mov': 'video',\n  'wmv': 'video',\n  // Image\n  'jpg': 'image',\n  'jpeg': 'image',\n  'png': 'image',\n  'gif': 'image',\n  'webp': 'image',\n  // Text\n  'txt': 'text',\n  'doc': 'text',\n  'docx': 'text',\n  'pdf': 'text',\n  'rtf': 'text'\n};\n\n// Conversion options for each type\nconst CONVERSION_OPTIONS = {\n  audio: ['mp3', 'wav', 'ogg', 'm4a'],\n  video: ['mp4', 'avi', 'mov', 'wmv'],\n  image: ['jpg', 'jpeg', 'png', 'gif', 'webp'],\n  text: ['txt', 'doc', 'docx', 'pdf', 'rtf']\n};\nfunction FileConverter() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [fileType, setFileType] = useState('');\n  const [targetFormat, setTargetFormat] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n  const {\n    guestId\n  } = useContext(UserContext);\n  const detectFileType = file => {\n    const extension = file.name.split('.').pop().toLowerCase();\n    return FILE_TYPES[extension] || null;\n  };\n  const getAvailableFormats = type => {\n    return CONVERSION_OPTIONS[type] || [];\n  };\n  const handleFileUpload = event => {\n    try {\n      const uploadedFile = event.target.files[0];\n      if (!uploadedFile) return;\n      const detectedType = detectFileType(uploadedFile);\n      if (!detectedType) {\n        showNotification('Unsupported file type', 'error');\n        return;\n      }\n      setFile(uploadedFile);\n      setFileType(detectedType);\n      setTargetFormat(''); // Reset target format when new file is uploaded\n    } catch (error) {\n      showNotification(error.message, 'error');\n    }\n  };\n  const handleConvert = async () => {\n    if (!file || !targetFormat) {\n      showNotification('Please select a target format', 'error');\n      return;\n    }\n    try {\n      setLoading(true);\n      setProgress(0);\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('sourceType', fileType);\n      formData.append('targetFormat', targetFormat);\n      await convertFile(formData, progressEvent => {\n        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        setProgress(percentCompleted);\n      });\n      showNotification('Conversion completed successfully!', 'success');\n\n      // Reset form\n      setFile(null);\n      setFileType('');\n      setTargetFormat('');\n    } catch (error) {\n      console.error('Conversion error:', error);\n      showNotification(`Conversion failed: ${error.message || 'Unknown error'}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const showNotification = (message, severity) => {\n    setNotification({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const closeNotification = () => {\n    setNotification(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      gap: 4,\n      py: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        component: \"h1\",\n        sx: {\n          mb: 2,\n          fontSize: {\n            xs: '2rem',\n            md: '3rem'\n          },\n          fontWeight: 800\n        },\n        children: \"Convert Any File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        color: \"text.secondary\",\n        sx: {\n          maxWidth: 600,\n          mx: 'auto',\n          fontWeight: 400\n        },\n        children: \"Fast, secure, and free file conversion. No registration required.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 0,\n      sx: {\n        p: 4,\n        width: '100%',\n        maxWidth: 600,\n        border: '1px solid',\n        borderColor: 'divider',\n        backgroundColor: 'background.paper'\n      },\n      children: !file ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          border: '2px dashed',\n          borderColor: 'primary.main',\n          borderRadius: 2,\n          p: 4,\n          textAlign: 'center',\n          cursor: 'pointer',\n          transition: 'all 0.2s ease',\n          '&:hover': {\n            backgroundColor: 'primary.main',\n            '& .upload-text': {\n              color: 'white'\n            },\n            '& .upload-icon': {\n              color: 'white'\n            }\n          }\n        },\n        component: \"label\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          hidden: true,\n          onChange: handleFileUpload,\n          accept: Object.keys(FILE_TYPES).map(ext => `.${ext}`).join(',')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CloudUpload, {\n          className: \"upload-icon\",\n          sx: {\n            fontSize: 48,\n            color: 'primary.main',\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: \"upload-text\",\n          variant: \"h6\",\n          color: \"primary\",\n          sx: {\n            mb: 1\n          },\n          children: \"Drop your file here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: \"upload-text\",\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: \"or click to browse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: 2,\n            mb: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(InsertDriveFile, {\n            sx: {\n              fontSize: 40,\n              color: 'primary.main'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              sx: {\n                fontWeight: 600\n              },\n              children: file.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [(file.size / (1024 * 1024)).toFixed(2), \" MB\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      open: notification.open,\n      message: notification.message,\n      severity: notification.severity,\n      onClose: closeNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(FileConverter, \"Uq5+bsecJeGpU0qvWKvMn3y1xMc=\");\n_c = FileConverter;\nexport default FileConverter;\nvar _c;\n$RefreshReg$(_c, \"FileConverter\");","map":{"version":3,"names":["useState","useContext","Box","Button","FormControl","InputLabel","MenuItem","Select","Typography","Paper","CloudUpload","InsertDriveFile","UserContext","convertFile","ConversionProgress","Notification","jsxDEV","_jsxDEV","FILE_TYPES","CONVERSION_OPTIONS","audio","video","image","text","FileConverter","_s","file","setFile","fileType","setFileType","targetFormat","setTargetFormat","loading","setLoading","progress","setProgress","notification","setNotification","open","message","severity","guestId","detectFileType","extension","name","split","pop","toLowerCase","getAvailableFormats","type","handleFileUpload","event","uploadedFile","target","files","detectedType","showNotification","error","handleConvert","formData","FormData","append","progressEvent","percentCompleted","Math","round","loaded","total","console","closeNotification","prev","sx","display","flexDirection","alignItems","gap","py","children","textAlign","mb","variant","component","fontSize","xs","md","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","color","maxWidth","mx","elevation","p","width","border","borderColor","backgroundColor","borderRadius","cursor","transition","hidden","onChange","accept","Object","keys","map","ext","join","className","size","toFixed","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Jordan/file-converter/frontend/src/components/FileConverter.js"],"sourcesContent":["import { useState, useContext } from 'react';\r\nimport { \r\n  Box, \r\n  Button, \r\n  FormControl, \r\n  InputLabel, \r\n  MenuItem, \r\n  Select, \r\n  Typography,\r\n  Paper \r\n} from '@mui/material';\r\nimport { CloudUpload, InsertDriveFile } from '@mui/icons-material';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { convertFile } from '../services/api';\r\nimport ConversionProgress from './ConversionProgress';\r\nimport Notification from './Notification';\r\n\r\n// File type mappings\r\nconst FILE_TYPES = {\r\n  // Audio\r\n  'mp3': 'audio',\r\n  'wav': 'audio',\r\n  'ogg': 'audio',\r\n  'm4a': 'audio',\r\n  \r\n  // Video\r\n  'mp4': 'video',\r\n  'avi': 'video',\r\n  'mov': 'video',\r\n  'wmv': 'video',\r\n  \r\n  // Image\r\n  'jpg': 'image',\r\n  'jpeg': 'image',\r\n  'png': 'image',\r\n  'gif': 'image',\r\n  'webp': 'image',\r\n  \r\n  // Text\r\n  'txt': 'text',\r\n  'doc': 'text',\r\n  'docx': 'text',\r\n  'pdf': 'text',\r\n  'rtf': 'text'\r\n};\r\n\r\n// Conversion options for each type\r\nconst CONVERSION_OPTIONS = {\r\n  audio: ['mp3', 'wav', 'ogg', 'm4a'],\r\n  video: ['mp4', 'avi', 'mov', 'wmv'],\r\n  image: ['jpg', 'jpeg', 'png', 'gif', 'webp'],\r\n  text: ['txt', 'doc', 'docx', 'pdf', 'rtf']\r\n};\r\n\r\nfunction FileConverter() {\r\n  const [file, setFile] = useState(null);\r\n  const [fileType, setFileType] = useState('');\r\n  const [targetFormat, setTargetFormat] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [notification, setNotification] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'info'\r\n  });\r\n\r\n  const { guestId } = useContext(UserContext);\r\n\r\n  const detectFileType = (file) => {\r\n    const extension = file.name.split('.').pop().toLowerCase();\r\n    return FILE_TYPES[extension] || null;\r\n  };\r\n\r\n  const getAvailableFormats = (type) => {\r\n    return CONVERSION_OPTIONS[type] || [];\r\n  };\r\n\r\n  const handleFileUpload = (event) => {\r\n    try {\r\n      const uploadedFile = event.target.files[0];\r\n      if (!uploadedFile) return;\r\n\r\n      const detectedType = detectFileType(uploadedFile);\r\n      if (!detectedType) {\r\n        showNotification('Unsupported file type', 'error');\r\n        return;\r\n      }\r\n\r\n      setFile(uploadedFile);\r\n      setFileType(detectedType);\r\n      setTargetFormat(''); // Reset target format when new file is uploaded\r\n    } catch (error) {\r\n      showNotification(error.message, 'error');\r\n    }\r\n  };\r\n\r\n  const handleConvert = async () => {\r\n    if (!file || !targetFormat) {\r\n      showNotification('Please select a target format', 'error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setProgress(0);\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      formData.append('sourceType', fileType);\r\n      formData.append('targetFormat', targetFormat);\r\n\r\n      await convertFile(formData, (progressEvent) => {\r\n        const percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        );\r\n        setProgress(percentCompleted);\r\n      });\r\n\r\n      showNotification('Conversion completed successfully!', 'success');\r\n      \r\n      // Reset form\r\n      setFile(null);\r\n      setFileType('');\r\n      setTargetFormat('');\r\n      \r\n    } catch (error) {\r\n      console.error('Conversion error:', error);\r\n      showNotification(\r\n        `Conversion failed: ${error.message || 'Unknown error'}`, \r\n        'error'\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const showNotification = (message, severity) => {\r\n    setNotification({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n\r\n  const closeNotification = () => {\r\n    setNotification(prev => ({ ...prev, open: false }));\r\n  };\r\n\r\n  return (\r\n    <Box \r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        gap: 4,\r\n        py: 8,\r\n      }}\r\n    >\r\n      <Box \r\n        sx={{\r\n          textAlign: 'center',\r\n          mb: 4,\r\n        }}\r\n      >\r\n        <Typography \r\n          variant=\"h2\" \r\n          component=\"h1\"\r\n          sx={{ \r\n            mb: 2,\r\n            fontSize: { xs: '2rem', md: '3rem' },\r\n            fontWeight: 800,\r\n          }}\r\n        >\r\n          Convert Any File\r\n        </Typography>\r\n        <Typography \r\n          variant=\"h6\" \r\n          color=\"text.secondary\"\r\n          sx={{ \r\n            maxWidth: 600,\r\n            mx: 'auto',\r\n            fontWeight: 400,\r\n          }}\r\n        >\r\n          Fast, secure, and free file conversion. No registration required.\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Paper \r\n        elevation={0}\r\n        sx={{\r\n          p: 4,\r\n          width: '100%',\r\n          maxWidth: 600,\r\n          border: '1px solid',\r\n          borderColor: 'divider',\r\n          backgroundColor: 'background.paper',\r\n        }}\r\n      >\r\n        {!file ? (\r\n          <Box\r\n            sx={{\r\n              border: '2px dashed',\r\n              borderColor: 'primary.main',\r\n              borderRadius: 2,\r\n              p: 4,\r\n              textAlign: 'center',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s ease',\r\n              '&:hover': {\r\n                backgroundColor: 'primary.main',\r\n                '& .upload-text': {\r\n                  color: 'white',\r\n                },\r\n                '& .upload-icon': {\r\n                  color: 'white',\r\n                },\r\n              },\r\n            }}\r\n            component=\"label\"\r\n          >\r\n            <input\r\n              type=\"file\"\r\n              hidden\r\n              onChange={handleFileUpload}\r\n              accept={Object.keys(FILE_TYPES).map(ext => `.${ext}`).join(',')}\r\n            />\r\n            <CloudUpload \r\n              className=\"upload-icon\"\r\n              sx={{ \r\n                fontSize: 48, \r\n                color: 'primary.main',\r\n                mb: 2,\r\n              }} \r\n            />\r\n            <Typography \r\n              className=\"upload-text\"\r\n              variant=\"h6\" \r\n              color=\"primary\"\r\n              sx={{ mb: 1 }}\r\n            >\r\n              Drop your file here\r\n            </Typography>\r\n            <Typography \r\n              className=\"upload-text\"\r\n              variant=\"body2\" \r\n              color=\"text.secondary\"\r\n            >\r\n              or click to browse\r\n            </Typography>\r\n          </Box>\r\n        ) : (\r\n          <Box sx={{ width: '100%' }}>\r\n            <Box \r\n              sx={{ \r\n                display: 'flex', \r\n                alignItems: 'center',\r\n                gap: 2,\r\n                mb: 3,\r\n              }}\r\n            >\r\n              <InsertDriveFile sx={{ fontSize: 40, color: 'primary.main' }} />\r\n              <Box>\r\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\r\n                  {file.name}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {(file.size / (1024 * 1024)).toFixed(2)} MB\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* Rest of your conversion UI */}\r\n            {/* ... */}\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n\r\n      <Notification\r\n        open={notification.open}\r\n        message={notification.message}\r\n        severity={notification.severity}\r\n        onClose={closeNotification}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default FileConverter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}