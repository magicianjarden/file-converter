{"ast":null,"code":"const MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\n\nconst ALLOWED_FORMATS = {\n  audio: ['mp3', 'wav', 'ogg', 'm4a'],\n  video: ['mp4', 'avi', 'mov', 'wmv'],\n  image: ['jpg', 'jpeg', 'png', 'gif', 'webp'],\n  text: ['txt', 'doc', 'docx', 'pdf', 'rtf']\n};\nexport const validateFile = (file, type) => {\n  if (!file) {\n    throw new Error('No file selected');\n  }\n  if (file.size > MAX_FILE_SIZE) {\n    throw new Error('File size exceeds 100MB limit');\n  }\n  const extension = file.name.split('.').pop().toLowerCase();\n  if (!ALLOWED_FORMATS[type].includes(extension)) {\n    throw new Error(`Invalid file format. Allowed formats: ${ALLOWED_FORMATS[type].join(', ')}`);\n  }\n  return true;\n};\nexport const getFileType = fileName => {\n  const extension = fileName.split('.').pop().toLowerCase();\n  for (const [type, formats] of Object.entries(ALLOWED_FORMATS)) {\n    if (formats.includes(extension)) {\n      return type;\n    }\n  }\n  return null;\n};","map":{"version":3,"names":["MAX_FILE_SIZE","ALLOWED_FORMATS","audio","video","image","text","validateFile","file","type","Error","size","extension","name","split","pop","toLowerCase","includes","join","getFileType","fileName","formats","Object","entries"],"sources":["C:/Users/Jordan/file-converter/frontend/src/utils/fileValidation.js"],"sourcesContent":["const MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\r\n\r\nconst ALLOWED_FORMATS = {\r\n  audio: ['mp3', 'wav', 'ogg', 'm4a'],\r\n  video: ['mp4', 'avi', 'mov', 'wmv'],\r\n  image: ['jpg', 'jpeg', 'png', 'gif', 'webp'],\r\n  text: ['txt', 'doc', 'docx', 'pdf', 'rtf']\r\n};\r\n\r\nexport const validateFile = (file, type) => {\r\n  if (!file) {\r\n    throw new Error('No file selected');\r\n  }\r\n\r\n  if (file.size > MAX_FILE_SIZE) {\r\n    throw new Error('File size exceeds 100MB limit');\r\n  }\r\n\r\n  const extension = file.name.split('.').pop().toLowerCase();\r\n  if (!ALLOWED_FORMATS[type].includes(extension)) {\r\n    throw new Error(`Invalid file format. Allowed formats: ${ALLOWED_FORMATS[type].join(', ')}`);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const getFileType = (fileName) => {\r\n  const extension = fileName.split('.').pop().toLowerCase();\r\n  for (const [type, formats] of Object.entries(ALLOWED_FORMATS)) {\r\n    if (formats.includes(extension)) {\r\n      return type;\r\n    }\r\n  }\r\n  return null;\r\n};"],"mappings":"AAAA,MAAMA,aAAa,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;;AAEzC,MAAMC,eAAe,GAAG;EACtBC,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EACnCC,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EACnCC,KAAK,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;EAC5CC,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK;AAC3C,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EAC1C,IAAI,CAACD,IAAI,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;EACrC;EAEA,IAAIF,IAAI,CAACG,IAAI,GAAGV,aAAa,EAAE;IAC7B,MAAM,IAAIS,KAAK,CAAC,+BAA+B,CAAC;EAClD;EAEA,MAAME,SAAS,GAAGJ,IAAI,CAACK,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC1D,IAAI,CAACd,eAAe,CAACO,IAAI,CAAC,CAACQ,QAAQ,CAACL,SAAS,CAAC,EAAE;IAC9C,MAAM,IAAIF,KAAK,CAAC,yCAAyCR,eAAe,CAACO,IAAI,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;EAC9F;EAEA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,QAAQ,IAAK;EACvC,MAAMR,SAAS,GAAGQ,QAAQ,CAACN,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACzD,KAAK,MAAM,CAACP,IAAI,EAAEY,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACrB,eAAe,CAAC,EAAE;IAC7D,IAAImB,OAAO,CAACJ,QAAQ,CAACL,SAAS,CAAC,EAAE;MAC/B,OAAOH,IAAI;IACb;EACF;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}